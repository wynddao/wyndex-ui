/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmStargateClientSelector as cosmWasmClient } from "../chain";
import { ConfigResponse, SimulateResponse } from "../../../clients/types/BondRouter.types";
import { BondRouterClient, BondRouterQueryClient } from "../../../clients/BondRouter.client";
import { signingCosmWasmStargateClientAtom } from "../../atoms";

type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<BondRouterQueryClient, QueryClientParams>({
  key: "bondRouterQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new BondRouterQueryClient(client, contractAddress);
  }
});

export type ExecuteClientParams = {
  contractAddress: string;
  sender: string;
};

export const executeClient = selectorFamily<BondRouterClient | undefined, ExecuteClientParams>({
  key: "WyndexBondRouterExecuteClient",
  get:
    ({ contractAddress, sender }) =>
    ({ get }) => {
      const client = get(signingCosmWasmStargateClientAtom);
      if (!client) return;
      return new BondRouterClient(client, sender, contractAddress);
    },
  dangerouslyAllowMutability: true,
});

export const configSelector = selectorFamily<ConfigResponse, QueryClientParams & {
  params: Parameters<BondRouterQueryClient["config"]>;
}>({
  key: "bondRouterConfig",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.config(...params);
  }
});
export const simulateSelector = selectorFamily<SimulateResponse, QueryClientParams & {
  params: Parameters<BondRouterQueryClient["simulate"]>;
}>({
  key: "bondRouterSimulate",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.simulate(...params);
  }
});